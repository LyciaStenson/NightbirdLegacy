#version 460 core

layout (quads, fractional_even_spacing, ccw) in;

out vec3 FragPos;
out vec3 Normal;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform float time;

uniform float waveAmplitude;
uniform float waveFrequency;

void main()
{
	float u = gl_TessCoord.x;
	float v = gl_TessCoord.y;

	vec4 p00 = gl_in[0].gl_Position;
	vec4 p01 = gl_in[1].gl_Position;
	vec4 p10 = gl_in[2].gl_Position;
	vec4 p11 = gl_in[3].gl_Position;
	
	vec4 uVec = p01 - p00;
	vec4 vVec = p10 - p00;
	vec3 normal = normalize(cross(vVec.xyz, uVec.xyz));

	vec4 p0 = (p01 - p00) * u + p00;
	vec4 p1 = (p11 - p10) * u + p10;
	vec4 p = (p1 - p0) * v + p0;
	
	float waveDisplacement = waveAmplitude * sin((time * waveFrequency) + p.x + p.y + p.z);
	
	//p += vec4(normal, 0.0f);
	//p.xyz += normal;
	p.xyz += normal * waveDisplacement;

	FragPos = p.xyz;

	Normal = mat3(transpose(inverse(model))) * normal;
	
	gl_Position = projection * view * model * p;
}